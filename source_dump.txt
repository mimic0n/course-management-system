# ==================================================
# Path: C:\Users\Admin\IdeaProjects\coursemngDACS1
# Detected tech: java
# ==================================================

## DIRECTORY STRUCTURE
```
coursemngDACS1/
├── .idea/
├── .mvn/
│   └── wrapper/
│       ├── maven-wrapper.jar
│       └── maven-wrapper.properties
├── database/
├── src/
│   └── main/
│       ├── java/
│       │   ├── com/
│       │   │   └── coursemanagement/
│       │   │       ├── controller/
│       │   │       │   ├── AddCourseDialogController.java
│       │   │       │   ├── CourseStudentsDialogController.java
│       │   │       │   ├── EditCourseDialogController.java
│       │   │       │   ├── LoginController.java
│       │   │       │   ├── RegisterController.java
│       │   │       │   ├── StudentDashboardController.java
│       │   │       │   └── TeacherDashboardController.java
│       │   │       ├── dao/
│       │   │       │   ├── AnnouncementDAO.java
│       │   │       │   ├── CourseDAO.java
│       │   │       │   ├── EnrollmentDAO.java
│       │   │       │   ├── LessonDAO.java
│       │   │       │   └── UserDAO.java
│       │   │       ├── database/
│       │   │       ├── exception/
│       │   │       │   ├── AuthenticationException.java
│       │   │       │   ├── BusinessLogicException.java
│       │   │       │   ├── CourseManagementException.java
│       │   │       │   ├── DatabaseException.java
│       │   │       │   ├── PermissionException.java
│       │   │       │   ├── ResourceNotFoundException.java
│       │   │       │   └── ValidationException.java
│       │   │       ├── model/
│       │   │       │   ├── Announcement.java
│       │   │       │   ├── Course.java
│       │   │       │   ├── Enrollment.java
│       │   │       │   ├── Lesson.java
│       │   │       │   └── User.java
│       │   │       ├── utils/
│       │   │       │   ├── AlertUtils.java
│       │   │       │   ├── PasswordUtils.java
│       │   │       │   ├── SessionManager.java
│       │   │       │   └── ValidationUtil.java
│       │   │       └── CourseManagementApp.java
│       │   └── module-info.java
│       └── resources/
│           ├── css/
│           ├── fonts/
│           ├── fxml/
│           │   ├── AddCourseDialog.fxml
│           │   ├── CourseStudentsDialog.fxml
│           │   ├── EditCourseDialog.fxml
│           │   ├── LoginView.fxml
│           │   ├── RegisterView.fxml
│           │   ├── StudentDashboard.fxml
│           │   ├── TeacherDashBoard.fxml
│           │   ├── read.txt
│           │   └── styles.css
│           ├── images/
│           │   └── C4Uicon.png
│           ├── application.properties
│           └── database.properties
├── target/
├── .gitignore
├── course-management-system.iml
├── mvnw
├── mvnw.cmd
└── pom.xml
```

## FILE CONTENTS

pom.xml : 
"<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.coursemanagement</groupId>
    <artifactId>course-management-system</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>

    <name> Course Management System </name>
    <description>Hệ thống quản lý khóa học online cho sinh viên và giảng viên</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version> <!-- hoặc phiên bản bạn muốn -->
    </parent>

    <properties>
        <!-- Java 21 Configuration -->
        <maven.compiler.source>23</maven.compiler.source>
        <maven.compiler.target>23</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- JavaFX 21 Configuration -->
        <javafx.version>21.0.2</javafx.version>
        <javafx.maven.plugin.version>0.0.8</javafx.maven.plugin.version>

        <!-- Dependency Versions -->
        <mysql.version>8.2.0</mysql.version>
        <bcrypt.version>0.10.2</bcrypt.version>
        <junit.version>5.10.1</junit.version>
        <commons.lang.version>3.14.0</commons.lang.version>
        <slf4j.version>2.0.9</slf4j.version>
        <jackson.version>2.16.1</jackson.version>
        <commons.io.version>2.15.1</commons.io.version>
    </properties>

    <dependencies>
        <!-- JavaFX Core Dependencies -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
        </dependency>


        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <!-- JavaFX Base (Required for proper module resolution) -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-base</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <!-- JavaFX Graphics (Required for Scene and Stage) -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-graphics</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <!-- MySQL Connector -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <version>${mysql.version}</version>
        </dependency>

        <!-- BCrypt for Password Hashing -->
        <dependency>
            <groupId>at.favre.lib</groupId>
            <artifactId>bcrypt</artifactId>
            <version>${bcrypt.version}</version>
        </dependency>

        <!-- Testing Dependencies -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Utility Libraries -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${commons.lang.version}</version>
        </dependency>

        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>${commons.io.version}</version>
        </dependency>

        <!-- Logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>${slf4j.version}</version>
        </dependency>

        <!-- JSON Processing -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
        </dependency>

        <!-- Spring Boot Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- WebSocket -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-websocket</artifactId>
        </dependency>

        <!-- Apache Commons Net for FTP -->
        <dependency>
            <groupId>commons-net</groupId>
            <artifactId>commons-net</artifactId>
            <version>3.8.0</version>
        </dependency>

        <!-- Spring Boot DevTools (tự reload khi chỉnh sửa) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Optional: Spring Security -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <!-- Optional: JPA & DB -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>


        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-mysql</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Maven Compiler Plugin - FIXED VERSION -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.12.1</version>
                <configuration>
                    <source>21</source>
                    <target>21</target>
                    <release>21</release>
                    <!-- NO compilerArgs here - they cause the error -->
                </configuration>
            </plugin>

            <!-- JavaFX Maven Plugin - PROPERLY CONFIGURED -->
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>${javafx.maven.plugin.version}</version>
                <configuration>
                    <mainClass>com.coursemanagement.CourseManagementApp</mainClass>
                    <!-- Runtime VM arguments (only applied when running) -->
                    <commandlineArgs>
                        --add-opens javafx.fxml/javafx.fxml=ALL-UNNAMED
                        --add-opens course.management.system/com.coursemanagement.controller=javafx.fxml
                    </commandlineArgs>
                </configuration>
            </plugin>

            <!-- Maven Surefire Plugin for Testing -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.2.5</version>
                <configuration>
                    <useSystemClassLoader>false</useSystemClassLoader>
                    <!-- Test runtime arguments -->
                    <argLine>
                        --add-opens java.base/java.lang=ALL-UNNAMED
                        --add-opens java.base/java.util=ALL-UNNAMED
                    </argLine>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <!-- Maven Shade Plugin for Executable JAR -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.5.1</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <createDependencyReducedPom>false</createDependencyReducedPom>
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>com.coursemanagement.CourseManagementApp</mainClass>

                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                            </transformers>
                            <filters>
                                <filter>
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <exclude>META-INF/*.SF</exclude>
                                        <exclude>META-INF/*.DSA</exclude>
                                        <exclude>META-INF/*.RSA</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Additional Build Plugins -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>3.3.2</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.3.1</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.3.0</version>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>com.coursemanagement.CourseManagementApp</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
        </plugins>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*</include>
                </includes>
            </resource>
        </resources>
    </build>
</project> "

src/main/java/com/coursemanagement/controller/CourseController.java :
"package com.coursemanagement.controller;

import com.coursemanagement.dao.EnrollmentDAO;
import com.coursemanagement.model.Course;
import com.coursemanagement.util.SessionManager;
import javafx.concurrent.Task;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ProgressIndicator;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

public class CourseController {
    @FXML private ImageView courseImage;
    @FXML private Label titleLabel;
    @FXML private Label instructorLabel;
    @FXML private Label descriptionLabel;
    @FXML private Label priceLabel;
    @FXML private Label durationLabel;
    @FXML private Label levelLabel;
    @FXML private Label enrollmentCountLabel;
    @FXML private Button enrollButton;
    @FXML private ProgressIndicator loadingIndicator;

    private Course course;
    private final EnrollmentDAO enrollmentDAO;

    public CourseController() {
        this.enrollmentDAO = new EnrollmentDAO();
    }

    public void setCourse(Course course) {
        this.course = course;
        loadCourseData();
    }

    private void loadCourseData() {
        if (course != null) {
            titleLabel.setText(course.getTitle());
            instructorLabel.setText("Instructor: " + course.getInstructor());
            descriptionLabel.setText(course.getDescription());
            priceLabel.setText("$" + String.format("%.2f", course.getPrice()));
            durationLabel.setText(course.getDurationHours() + " hours");
            levelLabel.setText(course.getLevel());

            // Load enrollment count
            loadEnrollmentCount();

            // Load course image
            loadCourseImage();

            // Check enrollment status
            checkEnrollmentStatus();
        }
    }

    private void loadEnrollmentCount() {
        Task<Integer> countTask = new Task<Integer>() {
            @Override
            protected Integer call() throws Exception {
                return enrollmentDAO.getCourseEnrollmentCount(course.getId());
            }
        };

        countTask.setOnSucceeded(e -> {
            int count = countTask.getValue();
            enrollmentCountLabel.setText(count + " students enrolled");
        });

        countTask.setOnFailed(e -> {
            enrollmentCountLabel.setText("Enrollment data unavailable");
        });

        new Thread(countTask).start();
    }

    private void loadCourseImage() {
        Task<Image> imageTask = new Task<Image>() {
            @Override
            protected Image call() throws Exception {
                String imageUrl = course.getImageUrl() != null ?
                        course.getImageUrl() : "https://via.placeholder.com/400x250";
                return new Image(imageUrl, true);
            }
        };

        imageTask.setOnSucceeded(e -> courseImage.setImage(imageTask.getValue()));
        imageTask.setOnFailed(e -> {
            Image placeholder = new Image("https://via.placeholder.com/400x250?text=Course+Image");
            courseImage.setImage(placeholder);
        });

        new Thread(imageTask).start();
    }

    private void checkEnrollmentStatus() {
        int currentUserId = SessionManager.getInstance().getCurrentUser().getId();

        Task<Boolean> checkTask = new Task<Boolean>() {
            @Override
            protected Boolean call() throws Exception {
                return enrollmentDAO.isEnrolled(currentUserId, course.getId());
            }
        };

        checkTask.setOnSucceeded(e -> {
            boolean isEnrolled = checkTask.getValue();
            if (isEnrolled) {
                enrollButton.setText("Already Enrolled");
                enrollButton.setDisable(true);
                enrollButton.setStyle("-fx-background-color: #28a745; -fx-text-fill: white; -fx-padding: 15; -fx-border-radius: 25; -fx-background-radius: 25; -fx-font-size: 16px; -fx-font-weight: bold;");
            } else {
                enrollButton.setText("Enroll Now");
                enrollButton.setDisable(false);
                enrollButton.setStyle("-fx-background-color: #667eea; -fx-text-fill: white; -fx-padding: 15; -fx-border-radius: 25; -fx-background-radius: 25; -fx-font-size: 16px; -fx-font-weight: bold;");
            }
        });

        checkTask.setOnFailed(e -> {
            enrollButton.setText("Enrollment Status Unknown");
            enrollButton.setDisable(true);
        });

        new Thread(checkTask).start();
    }

    @FXML
    private void enrollCourse() {
        if (course == null) return;

        enrollButton.setDisable(true);
        showLoading(true);

        int currentUserId = SessionManager.getInstance().getCurrentUser().getId();

        Task<Boolean> enrollTask = new Task<Boolean>() {
            @Override
            protected Boolean call() throws Exception {
                return enrollmentDAO.enroll(currentUserId, course.getId());
            }
        };

        enrollTask.setOnSucceeded(e -> {
            showLoading(false);
            boolean success = enrollTask.getValue();

            if (success) {
                showAlert("Success", "Successfully enrolled in: " + course.getTitle(), Alert.AlertType.INFORMATION);
                enrollButton.setText("Already Enrolled");
                enrollButton.setStyle("-fx-background-color: #28a745; -fx-text-fill: white; -fx-padding: 15; -fx-border-radius: 25; -fx-background-radius: 25; -fx-font-size: 16px; -fx-font-weight: bold;");
                loadEnrollmentCount(); // Refresh enrollment count
            } else {
                showAlert("Error", "Failed to enroll in the course. Please try again.", Alert.AlertType.ERROR);
                enrollButton.setDisable(false);
            }
        });

        enrollTask.setOnFailed(e -> {
            showLoading(false);
            showAlert("Error", "Enrollment failed: " + e.getSource().getException().getMessage(), Alert.AlertType.ERROR);
            enrollButton.setDisable(false);
        });

        new Thread(enrollTask).start();
    }

    private void showLoading(boolean show) {
        if (loadingIndicator != null) {
            loadingIndicator.setVisible(show);
        }
    }

    private void showAlert(String title, String message, Alert.AlertType type) {
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}"

src/main/java/com/coursemanagement/controller/LoginController.java :
"package com.coursemanagement.controller;


import com.coursemanagement.model.User;
import com.coursemanagement.util.SessionManager;
import com.coursemanagement.model.DatabaseConnection;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;

public class LoginController {
    @FXML private TextField usernameField;
    @FXML private PasswordField passwordField;
    @FXML private TextField regUsernameField;
    @FXML private TextField regEmailField;
    @FXML private PasswordField regPasswordField;
    @FXML private TextField regFullNameField;
    @FXML private TabPane tabPane;

    @FXML
    private void handleLogin() {
        String username = usernameField.getText().trim();
        String password = passwordField.getText();

        if (username.isEmpty() || password.isEmpty()) {
            showAlert("Error", "Please fill in all fields");
            return;
        }

        User user = DatabaseConnection.authenticateUser(username, password);
        if (user != null) {
            SessionManager.getInstance().setCurrentUser(user);
            openMainWindow();
        } else {
            showAlert("Error", "Invalid username or password");
        }
    }

    @FXML
    private void handleRegister() {
        String username = regUsernameField.getText().trim();
        String email = regEmailField.getText().trim();
        String password = regPasswordField.getText();
        String fullName = regFullNameField.getText().trim();

        if (username.isEmpty() || email.isEmpty() || password.isEmpty() || fullName.isEmpty()) {
            showAlert("Error", "Please fill in all fields");
            return;
        }

        User user = new User(username, email, password, fullName);
        if (DatabaseConnection.registerUser(user)) {
            showAlert("Success", "Registration successful! Please login.");
            tabPane.getSelectionModel().select(0); // Switch to login tab
            clearRegistrationFields();
        } else {
            showAlert("Error", "Registration failed. Username or email might already exist.");
        }
    }

    private void openMainWindow() {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/main.fxml"));
            Scene scene = new Scene(loader.load());
            Stage stage = (Stage) usernameField.getScene().getWindow();
            stage.setScene(scene);
            stage.setMaximized(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void clearRegistrationFields() {
        regUsernameField.clear();
        regEmailField.clear();
        regPasswordField.clear();
        regFullNameField.clear();
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setContentText(message);
        alert.showAndWait();
    }
}"

src/main/java/com/coursemanagement/controller/MainController.java :
"
package com.coursemanagement.controller;


import com.coursemanagement.model.Course;
import com.coursemanagement.model.DatabaseConnection;
import com.coursemanagement.util.SessionManager;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.net.URL;
import java.util.List;
import java.util.ResourceBundle;

public class MainController implements Initializable {
    @FXML private Label welcomeLabel;
    @FXML private ScrollPane coursesScrollPane;
    @FXML private GridPane coursesGrid;

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        welcomeLabel.setText("Welcome, " + SessionManager.getInstance().getCurrentUser().getFullName() + "!");
        loadCourses();
    }

    private void loadCourses() {
        List<Course> courses = DatabaseConnection.getAllCourses();
        int column = 0;
        int row = 0;

        for (Course course : courses) {
            VBox courseCard = createCourseCard(course);
            coursesGrid.add(courseCard, column, row);

            column++;
            if (column == 3) {
                column = 0;
                row++;
            }
        }
    }

    private VBox createCourseCard(Course course) {
        VBox card = new VBox(10);
        card.setPadding(new Insets(15));
        card.setStyle("-fx-background-color: white; -fx-border-color: #e0e0e0; -fx-border-radius: 8; -fx-background-radius: 8; -fx-effect: dropshadow(three-pass-box, rgba(0,0,0,0.1), 5, 0, 0, 2);");
        card.setPrefWidth(280);

        // Course image
        ImageView imageView = new ImageView();
        imageView.setFitWidth(250);
        imageView.setFitHeight(140);
        imageView.setPreserveRatio(false);
        try {
            Image image = new Image(course.getImageUrl() != null ? course.getImageUrl() : "https://via.placeholder.com/250x140");
            imageView.setImage(image);
        } catch (Exception e) {
            Image placeholder = new Image("https://via.placeholder.com/250x140");
            imageView.setImage(placeholder);
        }

        // Course title
        Label titleLabel = new Label(course.getTitle());
        titleLabel.setStyle("-fx-font-size: 16px; -fx-font-weight: bold; -fx-text-fill: #333;");
        titleLabel.setWrapText(true);

        // Instructor
        Label instructorLabel = new Label("by " + course.getInstructor());
        instructorLabel.setStyle("-fx-font-size: 12px; -fx-text-fill: #666;");

        // Price and duration
        Label priceLabel = new Label("$" + course.getPrice() + " • " + course.getDurationHours() + " hours • " + course.getLevel());
        priceLabel.setStyle("-fx-font-size: 12px; -fx-text-fill: #0066cc; -fx-font-weight: bold;");

        card.getChildren().addAll(imageView, titleLabel, instructorLabel, priceLabel);

        // Click handler
        card.setOnMouseClicked(e -> openCourseDetail(course));
        card.setOnMouseEntered(e -> card.setStyle(card.getStyle() + "; -fx-cursor: hand;"));

        return card;
    }

    @FXML
    private void openCourseDetail(Course course) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/course-detail.fxml"));
            Scene scene = new Scene(loader.load());

            CourseController controller = loader.getController();
            controller.setCourse(course);

            Stage stage = new Stage();
            stage.setTitle("Course Details");
            stage.setScene(scene);
            stage.show();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @FXML
    private void openProfile() {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/profile.fxml"));
            Scene scene = new Scene(loader.load());
            Stage stage = new Stage();
            stage.setTitle("Profile Management");
            stage.setScene(scene);
            stage.show();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @FXML
    private void logout() {
        SessionManager.getInstance().logout();
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/login.fxml"));
            Scene scene = new Scene(loader.load());
            Stage stage = (Stage) welcomeLabel.getScene().getWindow();
            stage.setScene(scene);
            stage.setMaximized(false);
            stage.centerOnScreen();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}"

src/main/java/com/coursemanagement/controller/ProlifeController.java :
"package com.coursemanagement.controller;
import com.coursemanagement.model.DatabaseConnection;
import com.coursemanagement.model.User;
import com.coursemanagement.util.SessionManager;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.TextField;

import java.net.URL;
import java.util.ResourceBundle;

public class ProlifeController implements Initializable {
    @FXML private TextField usernameField;
    @FXML private TextField emailField;
    @FXML private TextField fullNameField;

    private User currentUser;

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        currentUser = SessionManager.getInstance().getCurrentUser();
        loadUserData();
    }

    private void loadUserData() {
        if (currentUser != null) {
            usernameField.setText(currentUser.getUsername());
            emailField.setText(currentUser.getEmail());
            fullNameField.setText(currentUser.getFullName());
            usernameField.setEditable(false); // Username shouldn't be editable
        }
    }

    @FXML
    private void saveProfile() {
        String email = emailField.getText().trim();
        String fullName = fullNameField.getText().trim();

        if (email.isEmpty() || fullName.isEmpty()) {
            showAlert("Error", "Please fill in all fields");
            return;
        }

        currentUser.setEmail(email);
        currentUser.setFullName(fullName);

        if (DatabaseConnection.updateUser(currentUser)) {
            showAlert("Success", "Profile updated successfully!");
        } else {
            showAlert("Error", "Failed to update profile");
        }
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setContentText(message);
        alert.showAndWait();
    }
}"

src/main/java/com/coursemanagement/dao/CourseDAO.java :
"package com.coursemanagement.dao;

import com.coursemanagement.model.Course;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class CourseDAO {
    private final DatabaseConnection dbConnection;

    public CourseDAO() {
        this.dbConnection = DatabaseConnection.getInstance();
    }

    // Get all courses
    public List<Course> findAll() {
        List<Course> courses = new ArrayList<>();
        String sql = "SELECT * FROM courses ORDER BY created_at DESC";
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.createStatement();
            rs = stmt.executeQuery(sql);

            while (rs.next()) {
                courses.add(mapResultSetToCourse(rs));
            }
        } catch (SQLException e) {
            System.err.println("Error getting all courses: " + e.getMessage());
        } finally {
            dbConnection.closeResultSet(rs);
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return courses;
    }

    // Get course by ID
    public Course findById(int id) {
        String sql = "SELECT * FROM courses WHERE id = ?";
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, id);
            rs = stmt.executeQuery();

            if (rs.next()) {
                return mapResultSetToCourse(rs);
            }
        } catch (SQLException e) {
            System.err.println("Error finding course by ID: " + e.getMessage());
        } finally {
            dbConnection.closeResultSet(rs);
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return null;
    }

    // Search courses by title or instructor
    public List<Course> search(String keyword) {
        List<Course> courses = new ArrayList<>();
        String sql = "SELECT * FROM courses WHERE title LIKE ? OR instructor LIKE ? ORDER BY created_at DESC";
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            String searchPattern = "%" + keyword + "%";
            stmt.setString(1, searchPattern);
            stmt.setString(2, searchPattern);
            rs = stmt.executeQuery();

            while (rs.next()) {
                courses.add(mapResultSetToCourse(rs));
            }
        } catch (SQLException e) {
            System.err.println("Error searching courses: " + e.getMessage());
        } finally {
            dbConnection.closeResultSet(rs);
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return courses;
    }

    // Filter courses by level
    public List<Course> findByLevel(String level) {
        List<Course> courses = new ArrayList<>();
        String sql = "SELECT * FROM courses WHERE level = ? ORDER BY created_at DESC";
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, level);
            rs = stmt.executeQuery();

            while (rs.next()) {
                courses.add(mapResultSetToCourse(rs));
            }
        } catch (SQLException e) {
            System.err.println("Error finding courses by level: " + e.getMessage());
        } finally {
            dbConnection.closeResultSet(rs);
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return courses;
    }

    // Filter courses by price range
    public List<Course> findByPriceRange(double minPrice, double maxPrice) {
        List<Course> courses = new ArrayList<>();
        String sql = "SELECT * FROM courses WHERE price BETWEEN ? AND ? ORDER BY price ASC";
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setDouble(1, minPrice);
            stmt.setDouble(2, maxPrice);
            rs = stmt.executeQuery();

            while (rs.next()) {
                courses.add(mapResultSetToCourse(rs));
            }
        } catch (SQLException e) {
            System.err.println("Error finding courses by price range: " + e.getMessage());
        } finally {
            dbConnection.closeResultSet(rs);
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return courses;
    }

    // Create new course (for admin)
    public boolean create(Course course) {
        String sql = "INSERT INTO courses (title, description, instructor, price, duration_hours, level, image_url) VALUES (?, ?, ?, ?, ?, ?, ?)";
        Connection conn = null;
        PreparedStatement stmt = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, course.getTitle());
            stmt.setString(2, course.getDescription());
            stmt.setString(3, course.getInstructor());
            stmt.setDouble(4, course.getPrice());
            stmt.setInt(5, course.getDurationHours());
            stmt.setString(6, course.getLevel());
            stmt.setString(7, course.getImageUrl());

            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            System.err.println("Error creating course: " + e.getMessage());
        } finally {
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return false;
    }

    // Update course (for admin)
    public boolean update(Course course) {
        String sql = "UPDATE courses SET title = ?, description = ?, instructor = ?, price = ?, duration_hours = ?, level = ?, image_url = ? WHERE id = ?";
        Connection conn = null;
        PreparedStatement stmt = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, course.getTitle());
            stmt.setString(2, course.getDescription());
            stmt.setString(3, course.getInstructor());
            stmt.setDouble(4, course.getPrice());
            stmt.setInt(5, course.getDurationHours());
            stmt.setString(6, course.getLevel());
            stmt.setString(7, course.getImageUrl());
            stmt.setInt(8, course.getId());

            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            System.err.println("Error updating course: " + e.getMessage());
        } finally {
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return false;
    }

    // Delete course (for admin)
    public boolean delete(int courseId) {
        String sql = "DELETE FROM courses WHERE id = ?";
        Connection conn = null;
        PreparedStatement stmt = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, courseId);

            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            System.err.println("Error deleting course: " + e.getMessage());
        } finally {
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return false;
    }

    // Get popular courses (most enrolled)
    public List<Course> findPopularCourses(int limit) {
        List<Course> courses = new ArrayList<>();
        String sql = """
            SELECT c.*, COUNT(e.id) as enrollment_count 
            FROM courses c 
            LEFT JOIN enrollments e ON c.id = e.course_id 
            GROUP BY c.id 
            ORDER BY enrollment_count DESC 
            LIMIT ?
            """;
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, limit);
            rs = stmt.executeQuery();

            while (rs.next()) {
                courses.add(mapResultSetToCourse(rs));
            }
        } catch (SQLException e) {
            System.err.println("Error finding popular courses: " + e.getMessage());
        } finally {
            dbConnection.closeResultSet(rs);
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return courses;
    }

    // Helper method to map ResultSet to Course object
    private Course mapResultSetToCourse(ResultSet rs) throws SQLException {
        Course course = new Course();
        course.setId(rs.getInt("id"));
        course.setTitle(rs.getString("title"));
        course.setDescription(rs.getString("description"));
        course.setInstructor(rs.getString("instructor"));
        course.setPrice(rs.getDouble("price"));
        course.setDurationHours(rs.getInt("duration_hours"));
        course.setLevel(rs.getString("level"));
        course.setImageUrl(rs.getString("image_url"));
        course.setCreatedAt(rs.getTimestamp("created_at").toLocalDateTime());
        return course;
    }
}"

src/main/java/com/coursemanagement/dao/DatabaseConnection.java : "
package com.coursemanagement.dao;
import java.sql.*;

public class DatabaseConnection {
    private static final String URL = "jdbc:mysql://localhost:3306/course_management?useSSL=false&serverTimezone=Asia/Ho_Chi_Minh";
    private static final String USERNAME = "root";
    private static final String PASSWORD = "";

    private static DatabaseConnection instance;

    private DatabaseConnection() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            throw new RuntimeException("MySQL JDBC Driver not found", e);
        }
    }

    public static DatabaseConnection getInstance() {
        if (instance == null) {
            synchronized (DatabaseConnection.class) {
                if (instance == null) {
                    instance = new DatabaseConnection();
                }
            }
        }
        return instance;
    }

    public Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL, USERNAME, PASSWORD);
    }

    public void closeConnection(Connection connection) {
        if (connection != null) {
            try {
                connection.close();
            } catch (SQLException e) {
                System.err.println("Error closing connection: " + e.getMessage());
            }
        }
    }

    public void closeStatement(Statement statement) {
        if (statement != null) {
            try {
                statement.close();
            } catch (SQLException e) {
                System.err.println("Error closing statement: " + e.getMessage());
            }
        }
    }

    public void closeResultSet(ResultSet resultSet) {
        if (resultSet != null) {
            try {
                resultSet.close();
            } catch (SQLException e) {
                System.err.println("Error closing result set: " + e.getMessage());
            }
        }
    }
}
"
src/main/java/com/coursemanagement/dao/EnrollmentDAO.java : "
package com.coursemanagement.dao;

import com.coursemanagement.model.Course;
import com.coursemanagement.model.Enrollment;
import com.coursemanagement.model.User;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class EnrollmentDAO {
    private final DatabaseConnection dbConnection;

    public EnrollmentDAO() {
        this.dbConnection = DatabaseConnection.getInstance();
    }

    // Enroll user in course
    public boolean enroll(int userId, int courseId) {
        String sql = "INSERT INTO enrollments (user_id, course_id, status, progress) VALUES (?, ?, 'ACTIVE', 0)";
        Connection conn = null;
        PreparedStatement stmt = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, userId);
            stmt.setInt(2, courseId);

            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            System.err.println("Error enrolling user: " + e.getMessage());
        } finally {
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return false;
    }

    // Check if user is enrolled in course
    public boolean isEnrolled(int userId, int courseId) {
        String sql = "SELECT COUNT(*) FROM enrollments WHERE user_id = ? AND course_id = ?";
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, userId);
            stmt.setInt(2, courseId);
            rs = stmt.executeQuery();

            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        } catch (SQLException e) {
            System.err.println("Error checking enrollment: " + e.getMessage());
        } finally {
            dbConnection.closeResultSet(rs);
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return false;
    }

    // Get user's enrolled courses
    public List<Course> getUserEnrolledCourses(int userId) {
        List<Course> courses = new ArrayList<>();
        String sql = """
            SELECT c.*, e.enrollment_date, e.status, e.progress 
            FROM courses c 
            INNER JOIN enrollments e ON c.id = e.course_id 
            WHERE e.user_id = ? 
            ORDER BY e.enrollment_date DESC
            """;
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, userId);
            rs = stmt.executeQuery();

            while (rs.next()) {
                Course course = new Course();
                course.setId(rs.getInt("id"));
                course.setTitle(rs.getString("title"));
                course.setDescription(rs.getString("description"));
                course.setInstructor(rs.getString("instructor"));
                course.setPrice(rs.getDouble("price"));
                course.setDurationHours(rs.getInt("duration_hours"));
                course.setLevel(rs.getString("level"));
                course.setImageUrl(rs.getString("image_url"));
                course.setCreatedAt(rs.getTimestamp("created_at").toLocalDateTime());
                courses.add(course);
            }
        } catch (SQLException e) {
            System.err.println("Error getting user enrolled courses: " + e.getMessage());
        } finally {
            dbConnection.closeResultSet(rs);
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return courses;
    }

    // Get all enrollments for a course
    public List<Enrollment> getCourseEnrollments(int courseId) {
        List<Enrollment> enrollments = new ArrayList<>();
        String sql = """
            SELECT e.*, u.username, u.full_name, u.email 
            FROM enrollments e 
            INNER JOIN users u ON e.user_id = u.id 
            WHERE e.course_id = ? 
            ORDER BY e.enrollment_date DESC
            """;
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, courseId);
            rs = stmt.executeQuery();

            while (rs.next()) {
                Enrollment enrollment = mapResultSetToEnrollment(rs);

                // Set user info
                User user = new User();
                user.setId(rs.getInt("user_id"));
                user.setUsername(rs.getString("username"));
                user.setFullName(rs.getString("full_name"));
                user.setEmail(rs.getString("email"));
                enrollment.setUser(user);

                enrollments.add(enrollment);
            }
        } catch (SQLException e) {
            System.err.println("Error getting course enrollments: " + e.getMessage());
        } finally {
            dbConnection.closeResultSet(rs);
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return enrollments;
    }

    // Update enrollment progress
    public boolean updateProgress(int userId, int courseId, int progress) {
        String sql = "UPDATE enrollments SET progress = ? WHERE user_id = ? AND course_id = ?";
        Connection conn = null;
        PreparedStatement stmt = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, Math.max(0, Math.min(100, progress))); // Ensure progress is between 0-100
            stmt.setInt(2, userId);
            stmt.setInt(3, courseId);

            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            System.err.println("Error updating progress: " + e.getMessage());
        } finally {
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return false;
    }

    // Update enrollment status
    public boolean updateStatus(int userId, int courseId, String status) {
        String sql = "UPDATE enrollments SET status = ? WHERE user_id = ? AND course_id = ?";
        Connection conn = null;
        PreparedStatement stmt = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, status);
            stmt.setInt(2, userId);
            stmt.setInt(3, courseId);

            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            System.err.println("Error updating enrollment status: " + e.getMessage());
        } finally {
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return false;
    }

    // Cancel enrollment (soft delete)
    public boolean cancelEnrollment(int userId, int courseId) {
        return updateStatus(userId, courseId, "CANCELLED");
    }

    // Get enrollment details
    public Enrollment getEnrollment(int userId, int courseId) {
        String sql = "SELECT * FROM enrollments WHERE user_id = ? AND course_id = ?";
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, userId);
            stmt.setInt(2, courseId);
            rs = stmt.executeQuery();

            if (rs.next()) {
                return mapResultSetToEnrollment(rs);
            }
        } catch (SQLException e) {
            System.err.println("Error getting enrollment details: " + e.getMessage());
        } finally {
            dbConnection.closeResultSet(rs);
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return null;
    }

    // Get enrollment statistics for admin
    public int getTotalEnrollments() {
        String sql = "SELECT COUNT(*) FROM enrollments WHERE status = 'ACTIVE'";
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.createStatement();
            rs = stmt.executeQuery(sql);

            if (rs.next()) {
                return rs.getInt(1);
            }
        } catch (SQLException e) {
            System.err.println("Error getting total enrollments: " + e.getMessage());
        } finally {
            dbConnection.closeResultSet(rs);
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return 0;
    }

    // Get enrollment count for a specific course
    public int getCourseEnrollmentCount(int courseId) {
        String sql = "SELECT COUNT(*) FROM enrollments WHERE course_id = ? AND status = 'ACTIVE'";
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, courseId);
            rs = stmt.executeQuery();

            if (rs.next()) {
                return rs.getInt(1);
            }
        } catch (SQLException e) {
            System.err.println("Error getting course enrollment count: " + e.getMessage());
        } finally {
            dbConnection.closeResultSet(rs);
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return 0;
    }

    // Helper method to map ResultSet to Enrollment object
    private Enrollment mapResultSetToEnrollment(ResultSet rs) throws SQLException {
        Enrollment enrollment = new Enrollment();
        enrollment.setId(rs.getInt("id"));
        enrollment.setUserId(rs.getInt("user_id"));
        enrollment.setCourseId(rs.getInt("course_id"));
        enrollment.setEnrollmentDate(rs.getTimestamp("enrollment_date").toLocalDateTime());
        enrollment.setStatus(rs.getString("status"));
        enrollment.setProgress(rs.getInt("progress"));
        return enrollment;
    }
}
"

src/main/java/com/coursemanagement/dao/UserDAO.java : "
package com.coursemanagement.dao;

import com.coursemanagement.model.User;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;


public class UserDAO {
    private final DatabaseConnection dbConnection;

    public UserDAO() {
        this.dbConnection = DatabaseConnection.getInstance();
    }

    // Authenticate user for login
    public User authenticate(String username, String password) {
        String sql = "SELECT * FROM users WHERE username = ? AND password = ?";
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, username);
            stmt.setString(2, password);
            rs = stmt.executeQuery();

            if (rs.next()) {
                return mapResultSetToUser(rs);
            }
        } catch (SQLException e) {
            System.err.println("Error authenticating user: " + e.getMessage());
        } finally {
            dbConnection.closeResultSet(rs);
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return null;
    }

    // Create new user
    public boolean create(User user) {
        String sql = "INSERT INTO users (username, email, password, full_name, role) VALUES (?, ?, ?, ?, ?)";
        Connection conn = null;
        PreparedStatement stmt = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, user.getUsername());
            stmt.setString(2, user.getEmail());
            stmt.setString(3, user.getPassword());
            stmt.setString(4, user.getFullName());
            stmt.setString(5, user.getRole());

            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            System.err.println("Error creating user: " + e.getMessage());
        } finally {
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return false;
    }

    // Get user by ID
    public User findById(int id) {
        String sql = "SELECT * FROM users WHERE id = ?";
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, id);
            rs = stmt.executeQuery();

            if (rs.next()) {
                return mapResultSetToUser(rs);
            }
        } catch (SQLException e) {
            System.err.println("Error finding user by ID: " + e.getMessage());
        } finally {
            dbConnection.closeResultSet(rs);
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return null;
    }

    // Get user by username
    public User findByUsername(String username) {
        String sql = "SELECT * FROM users WHERE username = ?";
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, username);
            rs = stmt.executeQuery();

            if (rs.next()) {
                return mapResultSetToUser(rs);
            }
        } catch (SQLException e) {
            System.err.println("Error finding user by username: " + e.getMessage());
        } finally {
            dbConnection.closeResultSet(rs);
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return null;
    }

    // Check if email exists
    public boolean emailExists(String email) {
        String sql = "SELECT COUNT(*) FROM users WHERE email = ?";
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, email);
            rs = stmt.executeQuery();

            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        } catch (SQLException e) {
            System.err.println("Error checking email existence: " + e.getMessage());
        } finally {
            dbConnection.closeResultSet(rs);
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return false;
    }

    // Update user
    public boolean update(User user) {
        String sql = "UPDATE users SET email = ?, full_name = ? WHERE id = ?";
        Connection conn = null;
        PreparedStatement stmt = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, user.getEmail());
            stmt.setString(2, user.getFullName());
            stmt.setInt(3, user.getId());

            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            System.err.println("Error updating user: " + e.getMessage());
        } finally {
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return false;
    }

    // Update password
    public boolean updatePassword(int userId, String newPassword) {
        String sql = "UPDATE users SET password = ? WHERE id = ?";
        Connection conn = null;
        PreparedStatement stmt = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, newPassword);
            stmt.setInt(2, userId);

            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            System.err.println("Error updating password: " + e.getMessage());
        } finally {
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return false;
    }

    // Get all users (for admin)
    public List<User> findAll() {
        List<User> users = new ArrayList<>();
        String sql = "SELECT * FROM users ORDER BY created_at DESC";
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.createStatement();
            rs = stmt.executeQuery(sql);

            while (rs.next()) {
                users.add(mapResultSetToUser(rs));
            }
        } catch (SQLException e) {
            System.err.println("Error getting all users: " + e.getMessage());
        } finally {
            dbConnection.closeResultSet(rs);
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return users;
    }

    // Delete user
    public boolean delete(int userId) {
        String sql = "DELETE FROM users WHERE id = ?";
        Connection conn = null;
        PreparedStatement stmt = null;

        try {
            conn = dbConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, userId);

            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            System.err.println("Error deleting user: " + e.getMessage());
        } finally {
            dbConnection.closeStatement(stmt);
            dbConnection.closeConnection(conn);
        }
        return false;
    }

    // Helper method to map ResultSet to User object
    private User mapResultSetToUser(ResultSet rs) throws SQLException {
        User user = new User();
        user.setId(rs.getInt("id"));
        user.setUsername(rs.getString("username"));
        user.setEmail(rs.getString("email"));
        user.setPassword(rs.getString("password"));
        user.setFullName(rs.getString("full_name"));
        user.setRole(rs.getString("role"));
        user.setCreatedAt(rs.getTimestamp("created_at").toLocalDateTime());
        return user;
    }
}
"
src/main/java/com/coursemanagement/model/Course.java : " 
package com.coursemanagement.model;

import java.time.LocalDateTime;

public class Course {
    private int id;
    private String title;
    private String description;
    private String instructor;
    private double price;
    private int durationHours;
    private String level;
    private String imageUrl;
    private LocalDateTime createdAt;

    // Constructors
    public Course() {
    }

    public Course(String title, String description, String instructor, double price, int durationHours, String level) {
        this.title = title;
        this.description = description;
        this.instructor = instructor;
        this.price = price;
        this.durationHours = durationHours;
        this.level = level;
    }
    // Getters and Setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }

    public String getTitle() { return title; }
    public void setTitle(String title) { this.title = title; }

    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }

    public String getInstructor() { return instructor; }
    public void setInstructor(String instructor) { this.instructor = instructor; }

    public double getPrice() { return price; }
    public void setPrice(double price) { this.price = price; }

    public int getDurationHours() { return durationHours; }
    public void setDurationHours(int durationHours) { this.durationHours = durationHours; }

    public String getLevel() { return level; }
    public void setLevel(String level) { this.level = level; }

    public String getImageUrl() { return imageUrl; }
    public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; }

    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }

    @Override
    public String toString() {
        return "Course{" +
                "id=" + id +
                ", title='" + title + '\'' +
                ", instructor='" + instructor + '\'' +
                ", price=" + price +
                '}';
    }

}
"
src/main/java/com/coursemanagement/model/DatabaseConnection.java : "
package com.coursemanagement.model;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class DatabaseConnection {
    private static final String URL = "jdbc:mysql://localhost:3306/coursemanagement";
    private static final String USERNAME = "root";
    private static final String PASSWORD = "";

    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL, USERNAME, PASSWORD);
    }

    // User operations
    public static User authenticateUser(String username, String password) {
        String sql = "SELECT * FROM users WHERE username = ? AND password = ?";
        try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, username);
            stmt.setString(2, password);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                User user = new User();
                user.setId(rs.getInt("id"));
                user.setUsername(rs.getString("username"));
                user.setEmail(rs.getString("email"));
                user.setFullName(rs.getString("full_name"));
                user.setRole(rs.getString("role"));
                return user;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public static boolean registerUser(User user) {
        String sql = "INSERT INTO users (username, email, password, full_name) VALUES (?, ?, ?, ?)";
        try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, user.getUsername());
            stmt.setString(2, user.getEmail());
            stmt.setString(3, user.getPassword());
            stmt.setString(4, user.getFullName());
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    public static boolean updateUser(User user) {
        String sql = "UPDATE users SET email = ?, full_name = ? WHERE id = ?";
        try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, user.getEmail());
            stmt.setString(2, user.getFullName());
            stmt.setInt(3, user.getId());
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    // Course operations
    public static List<Course> getAllCourses() {
        List<Course> courses = new ArrayList<>();
        String sql = "SELECT * FROM courses ORDER BY created_at DESC";
        try (Connection conn = getConnection(); Statement stmt = conn.createStatement()) {
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                Course course = new Course();
                course.setId(rs.getInt("id"));
                course.setTitle(rs.getString("title"));
                course.setDescription(rs.getString("description"));
                course.setInstructor(rs.getString("instructor"));
                course.setPrice(rs.getDouble("price"));
                course.setDurationHours(rs.getInt("duration_hours"));
                course.setLevel(rs.getString("level"));
                course.setImageUrl(rs.getString("image_url"));
                courses.add(course);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return courses;
    }

    public static Course getCourseById(int id) {
        String sql = "SELECT * FROM courses WHERE id = ?";
        try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                Course course = new Course();
                course.setId(rs.getInt("id"));
                course.setTitle(rs.getString("title"));
                course.setDescription(rs.getString("description"));
                course.setInstructor(rs.getString("instructor"));
                course.setPrice(rs.getDouble("price"));
                course.setDurationHours(rs.getInt("duration_hours"));
                course.setLevel(rs.getString("level"));
                course.setImageUrl(rs.getString("image_url"));
                return course;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }
}
"

src/main/java/com/coursemanagement/model/Enrollment.java : "
package com.coursemanagement.model;

import java.time.LocalDateTime;

public class Enrollment {
    private int id;
    private int userId;
    private int courseId;
    private LocalDateTime enrollmentDate;
    private String status;
    private int progress;

    // Navigation properties
    private User user;
    private Course course;

    // Constructors
    public Enrollment() {}

    public Enrollment(int userId, int courseId) {
        this.userId = userId;
        this.courseId = courseId;
        this.status = "ACTIVE";
        this.progress = 0;
    }

    // Getters and Setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }

    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }

    public int getCourseId() { return courseId; }
    public void setCourseId(int courseId) { this.courseId = courseId; }

    public LocalDateTime getEnrollmentDate() { return enrollmentDate; }
    public void setEnrollmentDate(LocalDateTime enrollmentDate) { this.enrollmentDate = enrollmentDate; }

    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }

    public int getProgress() { return progress; }
    public void setProgress(int progress) { this.progress = progress; }

    public User getUser() { return user; }
    public void setUser(User user) { this.user = user; }

    public Course getCourse() { return course; }
    public void setCourse(Course course) { this.course = course; }

    @Override
    public String toString() {
        return "Enrollment{" +
                "id=" + id +
                ", userId=" + userId +
                ", courseId=" + courseId +
                ", status='" + status + '\'' +
                ", progress=" + progress +
                '}';
    }
}
"
src/main/java/com/coursemanagement/model/User.java : " 
package com.coursemanagement.model;
import java.time.LocalDateTime;

public class User {
    private int id;
    private String username;
    private String email;
    private String password;
    private String fullName;
    private String role;
    private LocalDateTime createdAt;

    // Constructors
    public User() {
    }

    public User(String username, String email, String password, String fullName) {
        this.username = username;
        this.email = email;
        this.password = password;
        this.fullName = fullName;
        this.role = "USER";
    }

    // Getters and Setters
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getFullName() {
        return fullName;
    }

    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    public String getRole() {
        return role;
    }

    public void setRole(String role) {
        this.role = role;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    // Utility methods
    public boolean isAdmin() {
        return "ADMIN".equals(this.role);
    }

    public boolean isUser() {
        return "USER".equals(this.role);
    }

    @Override
    public String toString() {
        return "User{" +
                "id=" + id +
                ", username='" + username + '\'' +
                ", fullName='" + fullName + '\'' +
                ", role='" + role + '\'' +
                '}';
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        User user = (User) obj;
        return id == user.id;
    }

    @Override
    public int hashCode() {
        return Integer.hashCode(id);
    }
}
"
src/main/java/com/coursemanagement/util/SessionManager.java : "
package com.coursemanagement.util;

import com.coursemanagement.model.User;
public class SessionManager {
    private static SessionManager instance;
    private User currentUser;

    private SessionManager() {}

    public static SessionManager getInstance() {
        if (instance == null) {
            instance = new SessionManager();
        }
        return instance;
    }

    public void setCurrentUser(User user) {
        this.currentUser = user;
    }

    public User getCurrentUser() {
        return currentUser;
    }

    public void logout() {
        currentUser = null;
    }

    public boolean isLoggedIn() {
        return currentUser != null;
    }
}
"
src/main/java/com/coursemanagement/CourseManagementApp.java : "
package com.coursemanagement;

import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.stage.Stage;

public class CourseManagementApp extends Application {
    @Override
    public void start(Stage stage) throws Exception {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/login.fxml"));
        Scene scene = new Scene(loader.load());

        stage.setTitle("Course Management System");
        stage.setScene(scene);
        stage.setResizable(false);
        stage.show();
    }

    public static void main(String[] args) {
        launch();
    }
}
"









